import pandas as pd
import oracledb
import os

# === CONFIG ===
CSV_FILE = './data/bank_reviews_with_sentiment_and_themes.csv'
ORACLE_DSN = oracledb.makedsn("localhost", 1521, service_name="XEPDB1")  
USERNAME = "SYS"
PASSWORD = "aeiou"

def connect_to_oracle():
    try:
        conn = oracledb.connect(user=USERNAME, password=PASSWORD, dsn=ORACLE_DSN, mode=oracledb.SYSDBA)
        print("✅ Connected to Oracle DB")
        return conn
    except Exception as e:
        raise RuntimeError(f"❌ Oracle connection failed: {e}")


def create_tables(cursor):
    cursor.execute("""
    CREATE TABLE banks (
        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR2(100) UNIQUE
    )
    """)

    cursor.execute("""
    CREATE TABLE reviews (
        id VARCHAR2(20) PRIMARY KEY,
        bank_id NUMBER REFERENCES banks(id),
        review_text CLOB,
        rating NUMBER,
        review_date DATE,
        source VARCHAR2(50),
        sentiment_label VARCHAR2(20),
        sentiment_score FLOAT,
        theme VARCHAR2(100),
        keywords VARCHAR2(500)
    )
    """)
    print("✅ Tables created (if not exist)")


def ensure_banks(cursor, df):
    bank_names = df['bank name'].unique()
    for name in bank_names:
        cursor.execute("SELECT COUNT(*) FROM banks WHERE name = :name", [name])
        exists = cursor.fetchone()[0]
        if exists == 0:
            cursor.execute("INSERT INTO banks (name) VALUES (:name)", [name])
    print("✅ Bank names inserted (if new)")


def get_bank_id(cursor, name):
    cursor.execute("SELECT id FROM banks WHERE name = :name", [name])
    return cursor.fetchone()[0]


def insert_reviews(cursor, df):
    inserted = 0
    for _, row in df.iterrows():
        try:
            cursor.execute("SELECT COUNT(*) FROM reviews WHERE id = :id", [row['review_id']])
            exists = cursor.fetchone()[0]
            if exists == 0:
                bank_id = get_bank_id(cursor, row['bank name'])
                cursor.execute("""
                INSERT INTO reviews (
                    id, bank_id, review_text, rating, review_date,
                    source, sentiment_label, sentiment_score, theme, keywords
                )
                VALUES (
                    :rid, :bid, :txt, :rat, TO_DATE(:rdate, 'YYYY-MM-DD'),
                    :src, :sent, :sscore, :thm, :kw
                )
            """, {
                'rid': row['review_id'],
                'bid': bank_id,
                'txt': row['review'],
                'rat': row['rating'],
                'rdate': row['date'],
                'src': row['source'],
                'sent': row['sentiment_label'],
                'sscore': row['sentiment_score'],
                'thm': row['theme'],
                'kw': row['keywords'] if pd.notnull(row['keywords']) and row['keywords'].strip() != '' else None
                })
            inserted += 1
        except Exception as e:
            print(f"❌ Skipping review {row['review_id']}: {e}")
    print(f"✅ Inserted {inserted} new reviews")


def main():
    df = pd.read_csv(CSV_FILE)
    conn = connect_to_oracle()
    cursor = conn.cursor()

    try:
        try:
            create_tables(cursor)
        except oracledb.DatabaseError:
            pass  # Tables already exist

        ensure_banks(cursor, df)
        insert_reviews(cursor, df)

        conn.commit()
    finally:
        cursor.close()
        conn.close()


if __name__ == "__main__":
    main()
